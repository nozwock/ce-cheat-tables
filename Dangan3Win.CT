<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Mono Coins"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>2 Bytes</VariableType>
      <Address>013E1B86</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Skill Fragments"</Description>
      <VariableType>2 Bytes</VariableType>
      <Address>013E196E</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Player Level"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Lv 1-5 = 500 Exp | Lv 6-? = 1000 Exp"</Description>
          <Color>CC0000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Total Experience"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>013E1960</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Visual Level"</Description>
          <VariableType>2 Bytes</VariableType>
          <Address>013E195C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Reflected Level / Skill Slots"</Description>
          <VariableType>2 Bytes</VariableType>
          <Address>013E196C</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Table Internal Data"</Description>
      <Options moAlwaysHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"list/Gift Unlocked State"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Unlocked
1:Locked
</DropDownList>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>
    <LuaScriptEntry><![CDATA[---@param record_description string
---@param value string
---@param set_all? boolean
function set_child_values(record_description, value, set_all)
	local record = AddressList.getMemoryRecordByDescription(record_description)
	assert(record, string.format("Record with description '%s' is not found.", record_description))

	for i = 0, record.Count - 1 do
		local child = record.Child[i]
		if not child.IsGroupHeader and (set_all or tonumber(child.Value) > 0) then
			child.Value = value
		end
	end
end
]]></LuaScriptEntry>
    <LuaScriptEntry><![CDATA[local header_default_options = {
	"moActivateChildrenAsWell",
	"moDeactivateChildrenAsWell",
	"moRecursiveSetValue",
	"moAllowManualCollapseAndExpand",
	"moManualExpandCollapse",
}

---@return userdata
local function get_gifts_root_group()
	local group_caption = "Gifts"
	local _memrec = AddressList.getMemoryRecordByDescription(group_caption)
	if _memrec ~= nil then
		return _memrec
	end

	local group_memrec = AddressList.createMemoryRecord()
	group_memrec.IsGroupHeader = true
	group_memrec.DontSave = true
	group_memrec.Description = group_caption
	group_memrec.Options = table.concat(header_default_options, ",")
	group_memrec.Collapsed = true

	return group_memrec
end

---@param base_address string
---@param gifts_count integer
local function generate_gifts_quantity_group(base_address, gifts_count)
	local group_caption = "Gifts Quantity"
	local _memrec = AddressList.getMemoryRecordByDescription(group_caption)
	if _memrec ~= nil then
		return
	end

	local group_memrec = AddressList.createMemoryRecord()
	group_memrec.IsAddressGroupHeader = true
	group_memrec.DontSave = true
	group_memrec.Description = group_caption
	group_memrec.Address = base_address
	group_memrec.Options = table.concat(header_default_options, ",")
	group_memrec.appendToEntry(get_gifts_root_group())

	for i = 0, gifts_count - 1 do
		local offset = i * 2
		local gift_memrec = AddressList.createMemoryRecord()
		gift_memrec.DontSave = true
		gift_memrec.Description = string.format("NO.%03.0f", i + 1)
		gift_memrec.VarType = "vtWord"
		gift_memrec.Address = "+" .. string.format("%X", offset)
		gift_memrec.appendToEntry(group_memrec)
	end

	group_memrec.Collapsed = true
end

---@param base_address string
---@param gifts_count integer
local function generate_gifts_unlocked_group(base_address, gifts_count)
	local group_caption = "Gifts Unlocked"
	local _memrec = AddressList.getMemoryRecordByDescription(group_caption)
	if _memrec ~= nil then
		return
	end

	local group_memrec = AddressList.createMemoryRecord()
	group_memrec.IsAddressGroupHeader = true
	group_memrec.DontSave = true
	group_memrec.Description = group_caption
	group_memrec.Address = base_address
	group_memrec.Options = table.concat(header_default_options, ",")
	group_memrec.appendToEntry(get_gifts_root_group())

	for i = 0, gifts_count - 1 do
		local gift_memrec = AddressList.createMemoryRecord()
		gift_memrec.DontSave = true
		gift_memrec.Description = string.format("NO.%03.0f", i + 1)
		gift_memrec.VarType = "vtBinary"
		gift_memrec.Binary.Startbit = i % 8
		gift_memrec.Binary.Size = 1
		gift_memrec.Address = "+" .. string.format("%X", i // 8)
		gift_memrec.DropDownLinked = true
		gift_memrec.DropDownLinkedMemRec = "list/Gift Unlocked State"
		gift_memrec.appendToEntry(group_memrec)
	end

	group_memrec.Collapsed = true
end

---@param is_script_active boolean
local function generate_gift_unlock_on_nonzero_quantity_script(is_script_active)
	local memrec_caption = "Automatically Unlock Gift On Nonzero Quantity"
	local memrec = AddressList.getMemoryRecordByDescription(memrec_caption)
	if memrec ~= nil then
		return
	end

	memrec = AddressList.createMemoryRecord()
	memrec.DontSave = true
	memrec.Description = memrec_caption
	memrec.VarType = "vtAutoAssembler"
	memrec.Script = [[{$lua}
[ENABLE]
_enable_gift_unlock_on_nonzero_quantity()
[DISABLE]
_disable_gift_unlock_on_nonzero_quantity()
]]

	memrec.appendToEntry(get_gifts_root_group())
	memrec.Active = is_script_active
end

---@param group_description string
---@return table<string, userdata>
local function get_description_record_mapping_of_group(group_description)
	local mapping = {}

	local memrec = AddressList.getMemoryRecordByDescription(group_description)
	if not memrec then
		return mapping
	end

	for i = 0, memrec.Count - 1 do
		local child = memrec.Child[i]
		mapping[child.Description] = child
	end

	return mapping
end

local gift_unlock_record_mapping
function _enable_gift_unlock_on_nonzero_quantity()
	local quantity_memrec = AddressList.getMemoryRecordByDescription("Gifts Quantity")
	assert(quantity_memrec)

	for i = 0, quantity_memrec.Count - 1 do
		local child = quantity_memrec.Child[i]
		child.OnValueChangedByUser = function(memrec, prev, curr)
			local mapped_memrec = gift_unlock_record_mapping[memrec.Description]
			if curr ~= "0" and mapped_memrec and mapped_memrec.Value == "1" then
				mapped_memrec.Value = "0" -- Unlocked
			end
		end
	end
end

function _disable_gift_unlock_on_nonzero_quantity()
	local quantity_memrec = AddressList.getMemoryRecordByDescription("Gifts Quantity")
	assert(quantity_memrec)

	for i = 0, quantity_memrec.Count - 1 do
		local child = quantity_memrec.Child[i]
		child.OnValueChangedByUser = nil
	end
end

local GIFTS_COUNT = 143
generate_gifts_quantity_group("013E20BC", GIFTS_COUNT)
generate_gifts_unlocked_group("013E22BC", GIFTS_COUNT)
generate_gift_unlock_on_nonzero_quantity_script(true)
get_gifts_root_group().Collapsed = true

gift_unlock_record_mapping = get_description_record_mapping_of_group("Gifts Unlocked")
]]></LuaScriptEntry>
  </LuaScript>
</CheatTable>
